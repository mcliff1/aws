AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: My AWS Console - web front end for your cloud tools

# for serverless Types (this is the template specification)
# https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#resource-types

# another exmample - https://github.com/aws-samples/startup-kit-serverless-workload/blob/master/serverless.cfn.yml

Parameters:
  Hostname:
    Description: Used to record the DNS record (matches stack name)
    Type: String

Globals:
  Function:
    Runtime: python3.6
    Environment:
      Variables:
        V_EXAMPLE: example variable


Resources:

  ApplicationApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt ApiAuthService.Arn
            # FunctionInvokeRole: !Ref MyRole
            Identity:
              Headers:
               - x-api-key
              # ReauthorizeEvery: 100 # seconds


  ServiceApiDomain:
    Type : AWS::ApiGateway::DomainName
    Properties:
      DomainName: {"Fn::Join": [".", [
          {"Ref": "Hostname"},
          "domain.com"
        ]]}
      RegionalCertificateArn: {"Ref": "SomeParamater"}
      EndpointConfiguration:
        Types:
          - REGIONAL

  ServiceApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: {"Ref": "ServiceApiDomain"}
      RestApiId: {"Ref": "ApplicationApi"}
      # Stage: Prod


  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: "URL for MyConsole Service (SAM)"
      Type: A
      HostedZoneName: "domain.com."
      Name: {"Fn::Join": ["", [
        {"Ref": "Hostname"},
           ".",
           "domain.com", "."]]}
      AliasTarget:
        HostedZoneId: Z2OJLYMUO9EFXC
        DNSName: {"Fn::GetAtt": ["ServiceApiDomain", "RegionalDomainName"]}


  ApiAuthService:
    Type: AWS::Serverless::Function
    Properties:
      Description: Authorizer function for API
      CodeUri: ./lambda/auth
      Handler: auth.handler

  ConsoleService:
    Type:  AWS::Serverless::Function
    Properties:
      Description: Provides GET support for console UI
      Handler: messenger.handler
      CodeUri: ./lambda/console
      Events:
        GetService:
          Type: Api
          Properties:
            Path: /service
            Method: get
            RestApiId: !Ref ApplicationApi
        CallService:
          Type: Api
          Properties:
            Path: /service/{serviceId}
            Method: post
            RestApiId: !Ref ApplicationApi


  SendService:
    Type:  AWS::Serverless::Function
    Properties:
      Description: Method to support API reciept of Send Request
      Handler: send.handler
      CodeUri: ./src
      Environment:
        Variables:
          SNS_TOPIC: !Ref NewMessageTopic
      Policies:
        - AmazonDynamoDBReadOnlyAccess
        - !Ref NordstromIamPolicy
        - Version: '2012-10-17' # inline policy
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: !GetAtt MessageTable.Arn
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref NewMessageTopic
      Events:
        SendMessage:
          Type: Api
          Properties:
            Path: /messenger/{serviceId}/send
            Method: post
            RestApiId: !Ref ApplicationApi


  NewMessageTopic:
    Type: AWS::SNS::Topic

  MessengerTable:
    Type: AWS::Serverless::SimpleTable
    PrimaryKey:
      Name: id
      Type: String
    ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
    Tags:
      Name: table of senders for this environment

Outputs:
  ApiURL:
    Description: "API URL"
    Value: !Sub 'https://${ApplicationApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

