service: slsweb
#  designed to be a 'simple' serverless site with managed content
#  must run in us-east-1 for CDN and custom domain name/certs

frameworkVersion: ">=1.9.0 <2.0.0"

custom:
  stage: ${opt:stage, self:provider.stage}
  domainname: ${opt:domainname, "no_domain_name"}
  #devDnsPrefix: sls-dev
  #prodDnsPrefix: sls
  prefix: sls
  buildPackage: slsbuild.zip
  extra: ${file(resources/${self:custom.stage}-dns.yml)}

provider:
  name: aws
  region: us-east-1
  runtime: python3.6

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:sns:::'
            - Ref: PublishSNS
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
        - 's3:PutObjectAcl'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: WebSiteS3
            - '/*'
    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:GetObjectAcl'
        - 's3:ListObjects'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: BuildS3
            - '/*'

functions:
  deploySlsContent:
    handler: upload_static_content.lambda_handler
    description: Deploys the output of CodeBuild to the runtime S3 hosted bucket
    environment:
      SOURCE_BUCKET: {Ref: BuildS3}
      TARGET_BUCKET: {Ref: WebSiteS3}
      BUILD_PACKAGE: ${self:custom.buildPackage}
      SNS_TOPIC: {Ref: PublishSNS}
    events:
      #- s3:
          #bucket: {Ref: BuildS3}
          #events: s3:ObjectCreated:*
          #rules:
            #- suffix: .zip
     




resources:
  Conditions: 
    CreateDnsResources:
      Fn::Not: 
        - Fn::Equals:
            - ${self:custom.domainname}
            - "no_domain_name"
    
  Mappings: ${file(resources/mappings.yml)}

  
  
  Resources:
    BuildS3:
      Type: "AWS::S3::Bucket"
      Properties:
        Tags:
          - Key: Name
            Value: "Code Build Target for static content on sls.${self:custom.domainname}"


    WebSiteS3:
      Type: "AWS::S3::Bucket"
      Properties:
        Tags:
          - Key: Name
            Value: "PUBLIC Bucket for static content on sls.${self:custom.domainname}"
          - Key: Name2
            Value: "tag is ${self:custom.extra.prefixA}"
        #AccessControl: PublicRead
        #CorsConfiguration: Will Need This
        WebsiteConfiguration:
          ErrorDocument: index.html
          IndexDocument: index.html

    WebSiteS3Policy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: {Ref: WebSiteS3}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - {Ref: WebSiteS3}
                  - "/*"



    # available containers - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
    CodeBuild:
      Type: "AWS::CodeBuild::Project"
      DependsOn: CodeBuildRole
      Properties:
        Tags:
          - Key: Name
            Value: "build static content on sls.${self:custom.domainname}"
        ServiceRole: {Ref: CodeBuildRole}
        Environment:
          Type: LINUX_CONTAINER
          ComputeType: BUILD_GENERAL1_SMALL
          Image: aws/codebuild/ubuntu-base:14.04
        Source: 
          Type: GITHUB
          Location: https://github.com/mcliff1/acg-react
        Artifacts: 
          Type: S3
          Location: {Ref: BuildS3}
          Name: ${self:custom.buildPackage}
          Packaging: ZIP

    CodeBuildRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AdministratorAccess"

    PublishSNS:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: SLS Web Deployment
        TopicName: SLSWebTopic
      


    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UsernameAttributes:
          - email
        MfaConfiguration: OFF
        UserPoolName: slswebpool-${self:custom.stage}
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true


    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: slswebpool-${self:custom.stage}-app
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: False
        UserPoolId: {Ref: UserPool}


    #DnsRecords: ${file(resources/${self:custom.stage}-dns.yml)}
    DnsRecords:
      Type: "AWS::Route53::RecordSet"
      Condition: CreateDnsResources
      Properties:
        Comment: "SLS URL"
        Type: A
        HostedZoneName: 
          Fn::Join:
            - ""
            - - ${self:custom.domainname}
              - "."
        Name: 
          Fn::Join:
            - ""
            - - ${self:custom.prefix}
              - "."
              - ${self:custom.domainname}
              - "."
        AliasTarget: 
          HostedZoneId: "Z2FDTNDATAQYW2"
          DNSName: {"Fn::GetAtt": CDN.DomainName}


    SSLCert:
      Type: "AWS::CertificateManager::Certificate"
      Condition: CreateDnsResources
      Properties:
        DomainName: "${self:custom.prefix}.${self:custom.domainname}"

    CDN: ${file(resources/cdn.yml)}

  #Outputs: ${file(resources/outputs.yml)}
  Outputs:
    WebSiteS3Arn:
      Description: ARN for the S3 bucket hosting the website content
      Value:
        "Fn::GetAtt": [ WebSiteS3, Arn ]
      Export:
        Name: ${self:service}:${self:custom.stage}:WebSiteS3Arn

